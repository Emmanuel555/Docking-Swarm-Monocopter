import numpy as np
import numpy.linalg as la
import math
#from pyquaternion import Quaternion
from pyrr import quaternion # array inputs are all flattened


class controllers(object):
    def __init__(self,kpos,kvel,kdpos,kpa,kpr,MOI,mode):
        ######## init setpts

        # comparison
        self.mode = mode

        # linear
        self.hgt = 1.5
        self.last_position = np.array([0, 0, 0])  # 3,: flattened form
        self.last_velocity = np.array([0, 0, 0])  # 3,: flattened form
        self.last_acceleration = np.array([0, 0, 0]) # 3,: flattened form
        self.last_pos_error = np.array([0, 0, 0]) # 3,: flattened form

        # polar magnitude
        self.ades_mag = 0
        self.last_polar_mag = 0
        self.heading = 0

        # angular tpp
        self.last_angle = np.array([0, 0, 0]) # 3,: flattened form
        self.last_angular_rate = np.array([0, 0, 0]) # 3,: flattened form
        self.last_angular_rate_rate = np.array([0, 0, 0]) # 3,: flattened form 

        # gains
        # position
        self.kpos = kpos 
        self.kvel = kvel 
        self.kdpos = kdpos 
        # attitude
        self.kpa = kpa # 3,: flattened form
        # bod rates
        self.kpr = kpr # 3,: flattened form
        # INDI body rate rates
        self.kpang = np.array([1.0, 1.0, 1.0]) # 3,: flattened form
        self.kdang = np.array([0, 0, 0]) # 3,: flattened form
        self.kiang = np.array([0, 0, 0]) # 3,: flattened form

        # ades
        self.ades = np.array([0, 0, 0]) # 3,: flattened form
        self.a_des_z = np.array([0, 0, 0]) # 3,: flattened form
        self.a_des_past = np.array([0, 0, 0]) # 3,: flattened form

        # gravity
        self.g = -np.array([0, 0, -9.81])

        # unit vectors
        self.ex = np.array([1, 0, 0]) 
        self.ey = np.array([0, 1, 0]) 
        self.ez = np.array([0, 0, 1]) 
        
        # error quaternion
        self.error_quat = np.array([0, 0, 0, 0]) # 4,: flattened form

        # MOI
        self.MOI = MOI 

        # collective thrust
        self.omega_z = 0
        self.cmd_z = 0

        # commanded inputs
        self.cmd_att = np.array([0, 0, 0]) # attitude
        self.cmd_bod_rates = np.array([0, 0, 0]) # body rates
        self.ff_snap = np.array([0, 0, 0]) # ff snap
        self.cmd_bod_rates_rates = np.array([0, 0, 0]) # body rate rates


    def store_coordinates(self, position, velocity, acceleration, angle, angular_rate, angular_rate_rate):
        self.last_position = position
        self.last_velocity = velocity
        self.last_acceleration = acceleration
        self.last_angle = angle
        self.last_angular_rate = angular_rate
        self.last_angular_rate_rate = angular_rate_rate


    def zd(self,ref_pos, ref_vel, ref_acc):
        vel_error = ref_vel - self.last_velocity
        error_pos_p = ref_pos - self.last_position
        error_pos_d = error_pos_p - self.last_pos_error
        self.ades = self.kpos*(error_pos_p) + self.kdpos*(error_pos_d) + self.kvel*(vel_error) + self.g + ref_acc
        self.a_des_z[2] = self.ades[2]

        # simple computation of cmd_z
        self.cmd_z = self.a_des_z[2]
        self.last_pos_error = error_pos_p
        
        return self.ades
    
    def zd_polar(self,ref_pos, ref_vel, ref_acc):
        vel_error = self.kvel*(ref_vel - self.last_velocity)
        error_pos_p = self.kpos*(ref_pos - self.last_position)
        error_pos_d = error_pos_p - self.last_pos_error
        #self.ades = self.kpos*(error_pos_p) + self.kdpos*(error_pos_d) + self.kvel*(vel_error) + self.g + ref_acc
        #self.a_des_z[2] = self.ades[2]

        # polar magnitude
        polar_mag_pos = la.norm(error_pos_p,2)
        # kiv this for later
        error_polar_mag = self.kdpos(ref_pos - self.last_position) - self.last_polar_mag
        polar_mag_vel = la.norm(vel_error,2)
        polar_mag_acc = la.norm(ref_acc,2)
        self.ades_mag = self.kpos*(error_pos_p) + self.kdpos*(error_pos_d) + self.kvel*(vel_error) + self.g + ref_acc
        
        polar_mag = la.norm(self.ades,2)
        self.last_polar_mag = polar_mag

        # heading
        self.heading = math.atan2(self.ades[1],self.ades[0])

        # simple computation of cmd_z
        self.cmd_z = self.a_des_z[2]
        self.last_pos_error = error_pos_p
        
        return self.ades


    def attitude_loop(self):
        qz = quaternion.create_from_eulers(self.last_angle)
        qzi = quaternion.inverse(qz)
        disk_vector = quaternion.apply_to_vector(qz, self.ez) # flattened array
        disk_vector = np.array([[disk_vector[0],disk_vector[1],disk_vector[2]]])  # 1 x 3 - row based simulated disk vector
        zd = self.ades/la.norm(self.ades,2)
        zd = np.array([[zd[0],zd[1],zd[2]]]) # 1 x 3 - row based simulated zd which is desired vector 
        num = np.dot(disk_vector,np.transpose(zd)) # 1 x 1
        den = la.norm(disk_vector,2)*la.norm(zd,2) # L2 norm of a and b
        angle = math.acos(num/den) # angle in radians

        n = np.cross(disk_vector,zd)/la.norm(np.cross(disk_vector,zd)) # cross product of a and b - 1 x 3
        n = list(n.flat) # flattened array
        B = quaternion.apply_to_vector(qzi, n) # inverse of qz applied to n
        self.error_quat = np.array([math.cos(angle/2), B[0]*math.sin(angle/2), B[1]*math.sin(angle/2), B[2]*math.sin(angle/2)]) # abt w x y z

        if self.error_quat[0] < 0:
            self.cmd_att[0:2] = -2*self.error_quat[1:3]
        else:
            self.cmd_att[0:2] = 2*self.error_quat[1:3] # bod_att[0] = abt x, bod_att[1] = abt y 
        self.cmd_att = self.kpa(self.cmd_att) # abt x y z

        return self.cmd_att
    

    def jerk_body_rate_loop(self,ref_jerk):
        wy = ref_jerk[0]/(-1*self.cmd_z)
        wx = ref_jerk[1]/self.cmd_z
        wz = 0
        des_bod_rates = np.array([wx,wy,wz]) # flattened array abt x y z
        self.cmd_bod_rates = self.kpr*(des_bod_rates - self.last_angular_rate)
        return self.cmd_bod_rates
    

    def snap_body_rate_rate_ff(self,ref_snap):
        dot_wy = ref_snap[0]/(-1*self.cmd_z)
        dot_wx = ref_snap[1]/self.cmd_z
        dot_wz = 0
        self.ff_snap = np.array([dot_wx,dot_wy,dot_wz]) # flattened array abt x y z
        return self.ff_snap
    
    
    def INDI_loop(self):
        if self.mode == 1:
           self.cmd_bod_rates_rates = self.kpang*(self.cmd_att - self.last_angular_rate_rate)
        elif self.mode == 3:
            self.cmd_bod_rates_rates = self.kpang*(((self.cmd_att + self.cmd_bod_rates + self.ff_snap)/3) - self.last_angular_rate_rate) 
        self.cmd_bod_rates_rates = self.MOI*self.cmd_bod_rates_rates
        return self.cmd_bod_rates_rates
    
    

    

        








        