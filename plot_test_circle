import numpy as np
import matplotlib.pyplot as plt
import minsnap_trajectories as ms
import trajectory_generator
from pyrr import quaternion
import timeit

start = timeit.default_timer()


""" # theta goes from 0 to 2pi
parts = 9
theta = np.linspace(0, 2*np.pi, parts)


speedX = 1


# the radius of the circle
r = 0.5
circumference = 2*np.pi*r
total_time = (circumference/0.1)/speedX
num_points = int((circumference/0.1)*100) # 0.1 m/s baseline 
num_points = int(num_points/speedX) # 0.1 m/s baseline


# compute x1 and x2
x = r*np.cos(theta)
y = r*np.sin(theta) + 1.2


refs = [
    ms.Waypoint(
        time=(total_time/(parts-1))*0,
        position=np.array([x[0], y[0], 1.0]),
    ),
    ms.Waypoint(
        time=(total_time/(parts-1))*1,
        position=np.array([x[1], y[1], 1.0]),
    ),
    ms.Waypoint(
        time=(total_time/(parts-1))*2,
        position=np.array([x[2], y[2], 1.0]),
    ),
    ms.Waypoint(
        time=(total_time/(parts-1))*3,
        position=np.array([x[3], y[3], 1.0]),
    ),
    ms.Waypoint(
        time=(total_time/(parts-1))*4,
        position=np.array([x[4], y[4], 1.0]),
    ),
    ms.Waypoint(
        time=(total_time/(parts-1))*5,
        position=np.array([x[5], y[5], 1.0]),
    ),
   ms.Waypoint(
        time=(total_time/(parts-1))*6,
        position=np.array([x[6], y[6], 1.0]),
    ),
    ms.Waypoint(
        time=(total_time/(parts-1))*7,
        position=np.array([x[7], y[7], 1.0]),
    ),
    ms.Waypoint(
        time=(total_time/(parts-1))*8,
        position=np.array([x[8], y[8], 1.0]),
    ),
]


polys = ms.generate_trajectory(
        refs,
        degree=8,  # Polynomial degree
        idx_minimized_orders=(3, 4),  
        num_continuous_orders=3,  
        algorithm="closed-form",  # Or "constrained"
    )


t = np.linspace(0, total_time, num_points)
# Sample up to the 3rd order (Jerk) -----v
pva = ms.compute_trajectory_derivatives(polys, t, 6) # up to order of derivatives is 6


# available order in derivatives in pva is one lesser than computed meaning up to one derivative less  


print(np.shape(pva)) # up to order of derivatives available, waypoints, axis
pos_x = pva[0,:,0] # position
vel_x = pva[1,:,0] # velocity
acc_x = pva[2,:,0] # accleleration
jerk_x = pva[3,:,0] # jerk
snap_x = pva[4,:,0] # snap

pos_y = pva[0,:,1] # position
vel_y = pva[1,:,1] # velocity
acc_y = pva[2,:,1] # accleleration
jerk_y = pva[3,:,1] # jerk
snap_y = pva[4,:,1] # snap


#qz = quaternion.create(0, 0, 0, 0.99)
# create the figure
print("original x coordinates: ", x) """
traj_gen = trajectory_generator.trajectory_generator()
#derivatives = traj_gen.jerk_snap_9pt_circle(0, 0.4, 0, 1)
pva,num_pts = traj_gen.compute_jerk_snap_9pt_circle_x_laps(0, 0.4, 1, 5)

#derivatives = traj_gen.jerk_snap_9pt_circle(0.5,0,0,1)
#pos = derivatives[0]

#print (len(derivatives))
#print(np.shape(pos))
# fig, ax = plt.subplots(1)
# ax.plot(pos[0], pos[1])
# ax.set_aspect(1)
# plt.show()

test = traj_gen.elevated_circle(0, 0.6, 0, 1)

# part 2
""" num_points = 3142
theta = np.linspace(0, 2*np.pi, num_points) # 3142 pts for 0.1m/s
z_1 = np.linspace(0.7, 1, num_points)
z_2 = np.linspace(1, 1.3, num_points)
z_3 = np.linspace(1.3, 1, num_points)
z_4 = np.linspace(1, 0.7, num_points)


# the radius of the circle
r = np.sqrt(0.5)

# compute x and y, starts from bottom facing positive x
x = r*np.cos(theta) 
y = r*np.sin(theta) + 0.8
z = y

helix_array_x = [x,x,x,x]
helix_array_y = [y,y,y,y] 
helix_array_z = [z_1,z_2,z_3,z_4] 


z_1 = np.linspace(0.7, 1, num_points)
z_2 = np.linspace(1, 1.3, num_points)
z_3 = np.linspace(1.3, 1, num_points)
z_4 = np.linspace(1, 0.7, num_points)

helix_array_x = np.array([x,x,x,x])
helix_array_y = np.array([y,y,y,y]) 
helix_array_z = np.array([z_1,z_2,z_3,z_4]) 

helix_array_x = helix_array_x.flat
helix_array_y = helix_array_y.flat
helix_array_z = helix_array_z.flat

fig_a = plt.figure()
mx = plt.axes(projection='3d')
mx.plot3D(helix_array_x, helix_array_y, helix_array_z, 'gray')
plt.show() """

stop = timeit.default_timer()
print('Program Runtime: ', stop - start)  